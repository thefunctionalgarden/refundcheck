AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2 + camiloce"
Description: ""
Resources:
    EC2EIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"
            InstanceId: !Ref EC2Instance
            Tags: 
              - 
                Key: "c"
                Value: "sellers guard 1"
              - 
                Key: "f"
                Value: "refundcheck 1"

    EC2EIPAssociation:
        Type: "AWS::EC2::EIPAssociation"
        Properties:
            AllocationId: !GetAtt EC2EIP.AllocationId
            InstanceId: !Ref EC2Instance

    EC2Instance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-0889a44b331db0194"
            InstanceType: "t2.micro"
            KeyName: !Ref EC2KeyPairImported
            AvailabilityZone: !GetAtt EC2Subnet8.AvailabilityZone
            Tenancy: "default"
            SubnetId: !Ref EC2Subnet8
            EbsOptimized: false
            SecurityGroupIds: 
              - !Ref EC2SecurityGroup3
              - !Ref EC2SecurityGroup1
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/xvda"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    VolumeType: "gp3"
                    DeleteOnTermination: false
            HibernationOptions: 
                Configured: false
            EnclaveOptions: 
                Enabled: false

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "load-balancer-refundcheck"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref EC2Subnet8
              - !Ref EC2Subnet7
            SecurityGroups: 
              - !Ref EC2SecurityGroup6
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "false"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    EC2SecurityGroup1:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: !Sub "Security group attached to instances to securely connect to ${RDSDBInstance}. Modification could lead to connection loss."
            GroupName: "ec2-rds-1"
            VpcId: !Ref EC2VPC

    EC2SecurityGroupIngressRDSEC2:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            GroupId: !Ref EC2SecurityGroup2
            SourceSecurityGroupId: !Ref EC2SecurityGroup1
            Description: !Sub "Rule to allow connections from RDS to EC2 instances with ${EC2SecurityGroup1} attached"
            IpProtocol: "tcp"
            FromPort: !GetAtt RDSDBInstance.Endpoint.Port
            ToPort: !GetAtt RDSDBInstance.Endpoint.Port

    EC2SecurityGroupEgressEC2RDS:
        Type: "AWS::EC2::SecurityGroupEgress"
        Properties:
            GroupId: !Ref EC2SecurityGroup1
            DestinationSecurityGroupId: !Ref EC2SecurityGroup2
            Description: !Sub "Rule to allow connections to ${RDSDBInstance} from any instances this security group is attached to"
            IpProtocol: "tcp"
            FromPort: !GetAtt RDSDBInstance.Endpoint.Port
            ToPort: !GetAtt RDSDBInstance.Endpoint.Port

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group attached to the RDSDBInstance to allow EC2 instances with specific security groups attached to connect to the database. Modification could lead to connection loss."
            GroupName: "rds-ec2-1"
            VpcId: !Ref EC2VPC

    EC2SecurityGroup3:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-1 created 2023-05-24T19:14:43.208Z"
            GroupName: "launch-wizard-1"
            Tags: 
              - 
                Key: "Name"
                Value: "Instance SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroupIngressLBEC2:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            GroupId: !Ref EC2SecurityGroup3
            SourceSecurityGroupId: !Ref EC2SecurityGroup6
            Description: !Sub "Rule to allow connections from LB to EC2 instances with ${EC2SecurityGroup3} attached"
            IpProtocol: "tcp"
            FromPort: 2020
            ToPort: 2020

    EC2SecurityGroupEgressEC2LB:
        Type: "AWS::EC2::SecurityGroupEgress"
        Properties:
            GroupId: !Ref EC2SecurityGroup6
            DestinationSecurityGroupId: !Ref EC2SecurityGroup3
            Description: "Rule to allow connections from LB to EC2 instance"
            IpProtocol: "tcp"
            FromPort: 2020
            ToPort: 2020

    EC2SecurityGroup6:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "default VPC security group"
            GroupName: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "Load Balancer SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "tcp"
                FromPort: 2020
                ToPort: 2020
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "tcp"
                FromPort: 443
                ToPort: 443

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/healthcheck/"
            Port: 2020
            Protocol: "HTTP"
            HealthCheckPort: "2020"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 15
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "target-group-refundcheck-http1"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: !Ref EC2Instance
                Port: 2020

    EC2NetworkInterface:  # private addr change?
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "ELB"
            SubnetId: !Ref EC2Subnet7
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup6

    EC2NetworkInterface2:  # OK
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            SubnetId: !Ref EC2Subnet8
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup3
              - !Ref EC2SecurityGroup1

    EC2NetworkInterface3:  # OK
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "RDSNetworkInterface"
            SubnetId: !Ref EC2Subnet6
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    RDSDBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: "db-pg-1"
            AllocatedStorage: 20
            DBInstanceClass: "db.t3.micro"
            Engine: "postgres"
            MasterUsername: "postgres"
            MasterUserPassword: "REPLACEME"
            PreferredBackupWindow: "05:25-05:55"
            BackupRetentionPeriod: 7
            AvailabilityZone: !Sub "${AWS::Region}a"
            PreferredMaintenanceWindow: "mon:04:30-mon:05:00"
            MultiAZ: false
            EngineVersion: "14.6"
            AutoMinorVersionUpgrade: true
            LicenseModel: "postgresql-license"
            PubliclyAccessible: false
            StorageType: "gp2"
            Port: 5432
            StorageEncrypted: false
            CopyTagsToSnapshot: true
            MonitoringInterval: 60
            EnableIAMDatabaseAuthentication: false
            EnablePerformanceInsights: false
            DeletionProtection: false
            DBSubnetGroupName: "rds-ec2-db-subnet-group-1"
            VPCSecurityGroups: 
              - !Ref EC2SecurityGroup2
            MaxAllocatedStorage: 1000
            DBParameterGroupName: "default.postgres14"
            OptionGroupName: "default:postgres-14"
            # MonitoringRoleArn: !GetAtt IAMRole2.Arn
            CACertificateIdentifier: "rds-ca-2019"

    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "Created from the RDS Management Console"
            DBSubnetGroupName: "rds-ec2-db-subnet-group-1"
            SubnetIds: 
              - !Ref EC2Subnet
              - !Ref EC2Subnet4
              - !Ref EC2Subnet5
              - !Ref EC2Subnet6
              - !Ref EC2Subnet11

    NeptuneDBSubnetGroup:
        Type: "AWS::Neptune::DBSubnetGroup"
        Properties:
            DBSubnetGroupName: "rds-ec2-db-subnet-group-1"
            DBSubnetGroupDescription: "Created from the RDS Management Console"
            SubnetIds: 
              - !Ref EC2Subnet
              - !Ref EC2Subnet4
              - !Ref EC2Subnet5
              - !Ref EC2Subnet6
              - !Ref EC2Subnet11

    # IAMRole2:
    #     Type: "AWS::IAM::Role"
    #     Properties:
    #         Path: "/"
    #         RoleName: "rds-monitoring-role"
    #         AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"monitoring.rds.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
    #         MaxSessionDuration: 3600
    #         ManagedPolicyArns: 
    #           - "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"

    DocDBDBSubnetGroup:
        Type: "AWS::DocDB::DBSubnetGroup"
        Properties:
            DBSubnetGroupName: "rds-ec2-db-subnet-group-1"
            DBSubnetGroupDescription: "Created from the RDS Management Console"
            SubnetIds: 
              - !Ref EC2Subnet
              - !Ref EC2Subnet4
              - !Ref EC2Subnet5
              - !Ref EC2Subnet6
              - !Ref EC2Subnet11

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "172.31.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet10.AvailabilityZone
            CidrBlock: "172.31.98.0/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "RDS-Pvt-subnet-5"

    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet5.AvailabilityZone
            CidrBlock: "172.31.32.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true

    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet11.AvailabilityZone
            CidrBlock: "172.31.0.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true

    EC2Subnet4:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet9.AvailabilityZone
            CidrBlock: "172.31.97.0/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "RDS-Pvt-subnet-3"

    EC2Subnet5:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}c"
            CidrBlock: "172.31.96.128/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "RDS-Pvt-subnet-2"

    EC2Subnet6:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet8.AvailabilityZone
            CidrBlock: "172.31.96.0/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "RDS-Pvt-subnet-1"

    EC2Subnet7:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}b"
            CidrBlock: "172.31.16.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true

    EC2Subnet8:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "172.31.80.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true

    EC2Subnet9:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}f"
            CidrBlock: "172.31.64.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true

    EC2Subnet10:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}e"
            CidrBlock: "172.31.48.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true

    EC2Subnet11:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}d"
            CidrBlock: "172.31.97.128/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "RDS-Pvt-subnet-4"

    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"

    EC2DHCPOptions:
        Type: "AWS::EC2::DHCPOptions"
        Properties:
            DomainName: "ec2.internal"

    EC2VPCDHCPOptionsAssociation:
        Type: "AWS::EC2::VPCDHCPOptionsAssociation"
        Properties:
            DhcpOptionsId: !Ref EC2DHCPOptions
            VpcId: !Ref EC2VPC

    EC2NetworkAcl:
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            VpcId: !Ref EC2VPC

    EC2NetworkAclEntry:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 100

    EC2NetworkAclEntry2:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 100

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "RDS-Pvt-rt"

    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable2

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !Ref EC2VPC

    EC2SubnetNetworkAclAssociation:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet9
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation2:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet8
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation3:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet6
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation4:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet10
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation5:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet4
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation6:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet2
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation7:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet5
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation8:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet11
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation9:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation10:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet3
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation11:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet7
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet6

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet

    EC2SubnetRouteTableAssociation3:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet4

    EC2SubnetRouteTableAssociation4:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet11

    EC2SubnetRouteTableAssociation5:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet5

    Route53HostedZone:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: sellersguard.com.

    Route53RecordSet:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: sellersguard.com.
            Type: "A"
            TTL: 300
            ResourceRecords: 
              - !Ref EC2EIP
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet2:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Ref Route53RecordSet
            Type: "NS"
            TTL: 172800
            ResourceRecords: 
              - "ns-1637.awsdns-12.co.uk."
              - "ns-194.awsdns-24.com."
              - "ns-1175.awsdns-18.org."
              - "ns-823.awsdns-38.net."
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet3:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Ref Route53RecordSet
            Type: "SOA"
            TTL: 900
            ResourceRecords: 
              - "ns-1637.awsdns-12.co.uk. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400"
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet4:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "...${Route53RecordSet}"
            Type: "CNAME"
            TTL: 300
            ResourceRecords: 
              - "...acm-validations.aws."
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet5:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "api.${Route53RecordSet}"
            Type: "A"
            TTL: 300
            ResourceRecords: 
              - !Ref EC2EIP
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet6:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "...api.${Route53RecordSet}"
            Type: "CNAME"
            TTL: 300
            ResourceRecords: 
              - "...acm-validations.aws."
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet7:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "www.${Route53RecordSet}"
            Type: "A"
            TTL: 300
            ResourceRecords: 
              - !Ref EC2EIP
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet8:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "...www.${Route53RecordSet}"
            Type: "CNAME"
            TTL: 300
            ResourceRecords: 
              - "...acm-validations.aws."
            HostedZoneId: !Ref Route53HostedZone

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-TLS13-1-2-2021-06"
            Certificates: 
              - 
                CertificateArn: !Ref CertificateManagerCertificate
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    EC2Volume:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: false
            Size: 8
            VolumeType: "gp3"
            MultiAttachEnabled: false

    EC2VolumeAttachment:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume
            InstanceId: !Ref EC2Instance
            Device: "/dev/xvda"

    EC2NetworkInterfaceAttachment:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: !Ref EC2NetworkInterface2
            DeviceIndex: 0
            InstanceId: !Ref EC2Instance
            DeleteOnTermination: true

    EC2KeyPairImported:
        Type: "AWS::EC2::KeyPair"
        Properties:
            KeyName: "key-pair-refundcheck-20230524"
            KeyType: "rsa"
            PublicKeyMaterial: |-
              ssh-rsa 
              MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjahY1NGzZZyPyhpD4RGs
              EHmoRfBESKzedetP8RPkYZuEzJro7ixQjALoigzGdhA8T74xhYlbYn66P9nZTVjY
              Hv54pLj4BU2FDT7vCvREOAKLNUSt5DTBgbbp31OptgF7+YVQcMo4AzarUnD9N+1B
              wBIFWZNF+ZZM4iPqSCmPrKgfFnDi0dfkQ5CLa3FJFhhm/AUJDOKevh4s9+AcApQJ
              nBknjc9n3BCkk1PkzFDG1N73E5knZ2nsFhVK5r8dAWKxqPz/owE/PBgLbLb/wphN
              fO/emjUs+8GrPu9NesKWW9Lo9ggryyymhrvBZkONHRCFO96VOeN97EqKtOWnPtbA
              GQIDAQAB
              key-pair-refundcheck-20230524

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "cf-templates-1srl1fc33rqci-${AWS::Region}"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3StorageLens:
        Type: "AWS::S3::StorageLens"
        Properties:
            StorageLensConfiguration: 
                AccountLevel: 
                    BucketLevel: {}
                Id: "default-account-dashboard"
                IsEnabled: true

    ElastiCacheUser:
        Type: "AWS::ElastiCache::User"
        Properties:
            UserId: "default"
            UserName: "default"
            Engine: "redis"
            AccessString: "on ~* +@all"
            NoPasswordRequired: true

    CertificateManagerCertificate:
        Type: "AWS::CertificateManager::Certificate"
        Properties:
            DomainName: "www.sellersguard.com"
            SubjectAlternativeNames: 
              - "www.sellersguard.com"
              - "api.sellersguard.com"
              - "sellersguard.com"
            DomainValidationOptions: 
              - 
                DomainName: "www.sellersguard.com"
                ValidationDomain: "www.sellersguard.com"
              - 
                DomainName: "api.sellersguard.com"
                ValidationDomain: "api.sellersguard.com"
              - 
                DomainName: "sellersguard.com"
                ValidationDomain: "sellersguard.com"
            CertificateTransparencyLoggingPreference: "ENABLED"

